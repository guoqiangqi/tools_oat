/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package ohos.oat.reporter;

import static ohos.oat.utils.IOatCommonUtils.getTaskDefaultPrjName;

import ohos.oat.config.OatConfig;
import ohos.oat.config.OatTask;
import ohos.oat.document.IOatDocument;
import ohos.oat.reporter.model.OatReportCopyrightInfo;
import ohos.oat.reporter.model.OatReportCreatorInfo;
import ohos.oat.reporter.model.OatReportFileInfo;
import ohos.oat.reporter.model.OatReportFileNameInfo;
import ohos.oat.reporter.model.OatReportFileTypeInfo;
import ohos.oat.reporter.model.OatReportInfo;
import ohos.oat.reporter.model.OatReportLicenseInfo;
import ohos.oat.reporter.model.OatReportProjectInfo;
import ohos.oat.reporter.model.OatReportSummaryInfo;
import ohos.oat.reporter.model.file.OatReportFile;
import ohos.oat.reporter.model.license.OatReportLicense;
import ohos.oat.utils.OatLogUtil;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Collect the detail analysis result to output files
 *
 * @author chenyaxun
 * @since 2.0
 */
public class OatDetailPlainReporter extends AbstractOatReporter {

    private final String reportFileName = "DetailPlainReport_";

    private final OatReportSummaryInfo oatReportSummaryInfo = new OatReportSummaryInfo();

    private final Map<String, OatReportInfo> prjName2ReportInfo = new HashMap<>();

    private FileWriter writer;

    private File resultFile;

    /**
     * @param oatConfig OAT configuration data structure
     * @param oatTask Task
     */
    @Override
    public IOatReporter init(final OatConfig oatConfig, final OatTask oatTask) {
        super.init(oatConfig, oatTask);

        String reportFolder = oatConfig.getData("reportFolder");

        if (reportFolder.length() <= 0) {
            reportFolder = "./";
        }
        final File dir = new File(reportFolder);
        if (!dir.exists()) {
            final boolean success = dir.mkdirs();
            if (!success) {
                OatLogUtil.warn(this.getClass().getSimpleName(), "Create dir failed");
            }
        }

        String filePrefix = getTaskDefaultPrjName(oatTask);
        filePrefix = filePrefix.replace("/", "_");
        if (filePrefix.length() > 1 && filePrefix.endsWith("_")) {
            filePrefix = filePrefix.substring(0, filePrefix.length() - 1);
        }
        this.resultFile = new File(reportFolder + "/" + this.reportFileName + filePrefix + ".txt");

        FileWriter fileWriter = null;
        try {
            fileWriter = new FileWriter(this.resultFile, false);
        } catch (final IOException e) {
            e.printStackTrace();
            return this;
        }
        this.writer = fileWriter;
        this.oatReportSummaryInfo.getReportCreatorInfo().setReportUser(System.getenv().get("USERNAME"));
        final Date date = new Date();
        final String strDate = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss'Z'").format(date);
        this.oatReportSummaryInfo.getReportCreatorInfo().setReportTime(strDate);
        this.oatReportSummaryInfo.getReportCreatorInfo()
            .setReportNotes(
                "Generated by OAT," + "If you have any questions or concerns, please create issue at https://gitee"
                    + ".com/openharmony-sig/tools_oat/issues");
        this.oatReportSummaryInfo.getReportCreatorInfo().setReportInitCommand(oatConfig.getData("initCommand"));

        return this;
    }

    /**
     * Report document
     *
     * @param oatFileDocument OatFileDocument
     */
    @Override
    public void report(final IOatDocument oatFileDocument) {
        final String prjName = oatFileDocument.getOatProject().getName();
        OatReportInfo oatReportInfo = this.prjName2ReportInfo.get(prjName);
        if (null == oatReportInfo) {
            oatReportInfo = new OatReportInfo();
            this.prjName2ReportInfo.put(prjName, oatReportInfo);
            this.oatReportSummaryInfo.addOatReportInfo(oatReportInfo);
            oatReportInfo.getReportProjectInfo().setProjectName(prjName);
            oatReportInfo.getReportProjectInfo().setMainLicense(oatFileDocument.getOatProject().getData("MainLicense"));
            oatReportInfo.getReportProjectInfo().setProjectHomePage(prjName);
            oatReportInfo.getReportConfigInfoInfo()
                .setProjectPolicy(oatFileDocument.getOatProject().getData("ProjectOAT"));

        }
        final OatReportFile oatReportFile = new OatReportFile(oatFileDocument);
        final IOatDocument.Status status = oatFileDocument.getStatus();
        if (status.isFileStatusNormal()) {
            oatReportInfo.getReportFileInfo().addProjectNormalFile(oatReportFile);
        } else if (status.isFileStatusFiltered()) {
            oatReportInfo.getReportFileInfo()
                .addProjectFilteredFile(oatReportFile.copy("Project Filtered File", "", status.getFileStatusRule(),
                    status.getFileStatusDesc()));
        } else if (status.isFileStatusFilteredByHeader()) {
            oatReportInfo.getReportFileInfo()
                .addProjectFilteredByHeaderFile(
                    oatReportFile.copy("Project Filtered By Header File", "", status.getFileStatusRule(),
                        status.getFileStatusDesc()));
        }

        for (final IOatDocument.FilteredRule filteredRule : oatFileDocument.getStatus()
            .getPolicyStatusFilteredMap()
            .values()) {
            filteredRule.setFilePath(oatReportFile.getFilePath());
            oatReportInfo.getReportFileNameInfo().addFilteredRule(filteredRule);
            oatReportInfo.getReportFileTypeInfo().addFilteredRule(filteredRule);
            oatReportInfo.getReportLicenseInfo().addLicenseFilteredRule(filteredRule);
            oatReportInfo.getReportLicenseInfo().addCompatibleFilteredRule(filteredRule);
            oatReportInfo.getReportCopyrightInfo().addFilteredRule(filteredRule);
        }

        if (oatFileDocument.isProjectRoot()) {
            if (oatFileDocument.getData("Result.LicenseFile").equals("false")) {
                oatReportInfo.getReportFileNameInfo().setHasLicenseFile(false);
            } else {
                oatReportInfo.getReportFileNameInfo().setHasLicenseFile(true);
            }

            if (oatFileDocument.getData("Result.ReadmeOpenSource").equals("false")) {
                oatReportInfo.getReportFileNameInfo().setHasReadmeOpenSourceFile(false);
            } else {
                oatReportInfo.getReportFileNameInfo().setHasReadmeOpenSourceFile(true);
            }

            if (oatFileDocument.getData("Result.Readme").equals("false")) {
                oatReportInfo.getReportFileNameInfo().setHasReadmeFile(false);
            } else {
                oatReportInfo.getReportFileNameInfo().setHasReadmeFile(true);
            }
        }

        if (oatFileDocument.getData("Result.FileType").equals("false")) {
            oatReportInfo.getReportFileTypeInfo()
                .addProjectInvalidTypeFile(oatReportFile.copy("Policy Not Passed-FileType"));
        }

        final String copyrightOwner = oatFileDocument.getData("CopyrightOwner");

        if (oatFileDocument.getData("Result.Copyright").equals("true")) {
            oatReportInfo.getReportCopyrightInfo().addNormalCopyright(copyrightOwner);
            oatReportInfo.getReportCopyrightInfo().addNormalCopyrightHeaderFile(oatReportFile);
        } else if (oatFileDocument.getData("Result.Copyright").equals("false")) {
            if ("NULL".equals(copyrightOwner)) {
                oatReportInfo.getReportCopyrightInfo()
                    .addNoCopyrightHeaderFile(oatReportFile.copy("Policy Not Passed-NoCopyright", copyrightOwner));
            } else {
                oatReportInfo.getReportCopyrightInfo().addAbnormalCopyright(copyrightOwner);
                oatReportInfo.getReportCopyrightInfo()
                    .addAbnormalCopyrightHeaderFile(
                        oatReportFile.copy("Policy Not Passed-WrongCopyright", copyrightOwner));
            }
        }
        oatReportInfo.getReportCopyrightInfo().addCopyright2File(copyrightOwner, oatReportFile);

        final String licenseName = oatFileDocument.getData("LicenseName");
        final OatReportLicense oatReportlicense = new OatReportLicense();
        oatReportlicense.setLicenseId(licenseName);
        if (oatFileDocument.getData("Result.License").equals("true")) {
            oatReportInfo.getReportLicenseInfo().addNormalLicenseType(oatReportlicense);
        } else if (oatFileDocument.getData("Result.License").equals("false")) {
            if ("NULL".equals(licenseName)) {
                oatReportInfo.getReportLicenseInfo()
                    .addNoLicenseHeaderFile(oatReportFile.copy("Policy Not Passed-NoLicenseHeader", licenseName));
            } else {
                oatReportInfo.getReportLicenseInfo().addAbnormalLicenseType(oatReportlicense);
                oatReportInfo.getReportLicenseInfo()
                    .addAbnormalLicenseHeaderFile(
                        oatReportFile.copy("Policy Not Passed-WrongLicenseHeader", licenseName));
            }
        }
        oatReportInfo.getReportLicenseInfo().addLicenseId2File(licenseName, oatReportFile);

        if (oatFileDocument.getData("Result.Compatibility").equals("false")) {
            oatReportInfo.getReportLicenseInfo().addNotCompatibleLicenseType(oatReportlicense);
            oatReportInfo.getReportLicenseInfo()
                .addNotCompatibleLicenseTypeFile(oatReportFile.copy("Policy Not Passed-Compatibility", licenseName));
        }

    }

    /**
     * Write report to file
     */
    @Override
    public void writeReport() {
        if (this.writer == null) {
            OatLogUtil.println("", "Writer is null, file path:\t" + this.resultFile);
            return;
        }
        try {
            final OatReportCreatorInfo oatReportCreatorInfo = this.oatReportSummaryInfo.getReportCreatorInfo();
            this.writeLine("Report User: ", oatReportCreatorInfo.getReportUser());
            this.writeLine("Report Time: ", oatReportCreatorInfo.getReportTime());
            this.writeLine("Report Tool: ", oatReportCreatorInfo.getReportTool());
            final String toolVersion = oatReportCreatorInfo.getReportToolVersion();
            this.writeLine("Report Tool Version: ", toolVersion);
            this.writeLine("Report Notes: ", oatReportCreatorInfo.getReportNotes());
            this.writeLine("Report Command: ", "java -jar ohos_ossaudittool-" + toolVersion + ".jar "
                + this.oatReportSummaryInfo.getReportCreatorInfo().getReportInitCommand());

            final List<OatReportInfo> oatReportInfoList = this.oatReportSummaryInfo.getOatReportInfoList();
            this.writeLine("Report Project Count: ", "" + oatReportInfoList.size());

            int index = 1;
            for (final OatReportInfo oatReportInfo : oatReportInfoList) {
                this.writeLine("");
                this.writeLine("Project Begin " + index + "/" + oatReportInfoList.size() + ": \t");

                final OatReportProjectInfo oatReportProjectInfo = oatReportInfo.getReportProjectInfo();
                this.writeLine("Project Name: ", oatReportProjectInfo.getProjectName());
                this.writeLine("Project Home Page: ", oatReportProjectInfo.getProjectHomePage());
                this.writeLine("Project Branch: ", oatReportProjectInfo.getProjectBranch());
                this.writeLine("Project Commit Id: ", oatReportProjectInfo.getProjectCommitId());
                this.writeLine("Project Version: ", oatReportProjectInfo.getProjectVersion());
                this.writeLine("Project Main License: ", oatReportProjectInfo.getMainLicense());

                final OatReportFileNameInfo oatReportFileNameInfo = oatReportInfo.getReportFileNameInfo();
                this.writeLine("Project License File: ", (oatReportFileNameInfo.isHasLicenseFile() ? "TRUE" : "FALSE"));
                this.writeLine("Project README: ", (oatReportFileNameInfo.isHasReadmeFile() ? "TRUE" : "FALSE"));
                this.writeLine("Project README.OpenSource: ",
                    (oatReportFileNameInfo.isHasReadmeOpenSourceFile() ? "TRUE" : "FALSE"));

                final OatReportFileInfo oatReportFileInfo = oatReportInfo.getReportFileInfo();
                this.writeLine("");
                this.writeLine("Project File Count: ", "" + oatReportFileInfo.getProjectFileCount());
                this.writeLine("Project Normal File Count: ", "" + oatReportFileInfo.getProjectNormalFileCount());

                this.writeLine("Project Filtered File Count: ", "" + oatReportFileInfo.getProjectFilteredFileCount());
                final List<OatReportFile> projectFilteredFileList = oatReportFileInfo.getProjectFilteredFileList();
                this.writeFileList(projectFilteredFileList);

                this.writeLine("Project Filtered By Header File Count: \t"
                    + oatReportFileInfo.getProjectFilteredByHeaderFileCount());
                final List<OatReportFile> projectFilteredByHeaderFileList
                    = oatReportFileInfo.getProjectFilteredByHeaderFileList();
                this.writeFileList(projectFilteredByHeaderFileList);

                final List<IOatDocument.FilteredRule> filteredRuleList = oatReportFileNameInfo.getFilteredRules();
                this.writeLine("Policy Filtered Count-FileName: \t" + oatReportFileNameInfo.getFilteredRuleCount());
                for (final IOatDocument.FilteredRule filteredRule : filteredRuleList) {
                    this.writeLine("Policy Filtered-FileName-" + filteredRule.getPolicyName(), "",
                        filteredRule.getFilePath(), filteredRule.getFilterItem(), filteredRule.getDesc());
                }
                this.writeLine("");

                final OatReportFileTypeInfo oatReportFileTypeInfo = oatReportInfo.getReportFileTypeInfo();

                final List<IOatDocument.FilteredRule> fileTypeFilteredRuleList
                    = oatReportFileTypeInfo.getFilteredRules();
                this.writeLine("Policy Filtered Count-FileType: \t" + oatReportFileTypeInfo.getFilteredRuleCount());
                for (final IOatDocument.FilteredRule filteredRule : fileTypeFilteredRuleList) {
                    this.writeLine("Policy Filtered-FileType-" + filteredRule.getPolicyName(),
                        filteredRule.getOatDocument().getData("FileType"), filteredRule.getFilePath(),
                        filteredRule.getFilterItem(), filteredRule.getDesc());
                }
                this.writeLine("");

                final OatReportLicenseInfo oatReportLicenseInfo = oatReportInfo.getReportLicenseInfo();
                final List<IOatDocument.FilteredRule> licenseFilteredRuleList
                    = oatReportLicenseInfo.getLicenseFilteredRules();
                this.writeLine(
                    "Policy Filtered Count-LicenseHeader: \t" + oatReportLicenseInfo.getLicenseFilteredRuleCount());
                for (final IOatDocument.FilteredRule filteredRule : licenseFilteredRuleList) {
                    this.writeLine("Policy Filtered-LicenseHeader",
                        filteredRule.getOatDocument().getData("LicenseName"), filteredRule.getFilePath(),
                        filteredRule.getFilterItem(), filteredRule.getDesc());
                }
                this.writeLine("");

                final List<IOatDocument.FilteredRule> compatibleFilteredRuleList
                    = oatReportLicenseInfo.getCompatibleFilteredRules();
                this.writeLine(
                    "Policy Filtered Count-Compatibility: \t" + oatReportLicenseInfo.getCompatibleFilteredRuleCount());
                for (final IOatDocument.FilteredRule filteredRule : compatibleFilteredRuleList) {
                    this.writeLine("Policy Filtered-Compatibility",
                        filteredRule.getOatDocument().getData("LicenseName"), filteredRule.getFilePath(),
                        filteredRule.getFilterItem(), filteredRule.getDesc());
                }
                this.writeLine("");

                final OatReportCopyrightInfo oatReportCopyrightInfo = oatReportInfo.getReportCopyrightInfo();
                final List<IOatDocument.FilteredRule> copyrightFilteredRuleList
                    = oatReportCopyrightInfo.getFilteredRules();
                this.writeLine("Policy Filtered Count-Copyright: \t" + oatReportCopyrightInfo.getFilteredRuleCount());
                for (final IOatDocument.FilteredRule filteredRule : copyrightFilteredRuleList) {
                    this.writeLine("Policy Filtered-Copyright", filteredRule.getOatDocument().getData("CopyrightOwner"),
                        filteredRule.getFilePath(), filteredRule.getFilterItem(), filteredRule.getDesc());
                }
                this.writeLine("");

                this.writeLine("Project Config: \t");
                this.writeLine(oatReportInfo.getReportConfigInfoInfo().getProjectPolicy());

                this.writeLine("");
                this.writeLine("");

                this.writeLine("XXXXXXXXX Policy Not Passed Begin XXXXXXXXX");
                this.writeLine("Policy Not Passed Count-FileType: ",
                    "" + oatReportFileTypeInfo.getInvalidTypeFileCount());
                final List<OatReportFile> invalidTypeFileList = oatReportFileTypeInfo.getInvalidTypeFileList();
                this.writeFileList(invalidTypeFileList);

                this.writeLine("Policy Not Passed Count-Compatibility: ",
                    "" + oatReportLicenseInfo.getNotCompatibleLicenseTypeFileCount());
                final List<OatReportFile> notCompatibleLicenseFileList
                    = oatReportLicenseInfo.getNotCompatibleLicenseTypeFileList();
                this.writeFileList(notCompatibleLicenseFileList);

                this.writeLine("Policy Not Passed Count-WrongLicenseHeader: ",
                    "" + oatReportLicenseInfo.getAbnormalLicenseHeaderFileCount());
                final List<OatReportFile> abnormalLicenseHeaderFile
                    = oatReportLicenseInfo.getAbnormalLicenseHeaderFileList();
                this.writeFileList(abnormalLicenseHeaderFile);
                this.writeLine("Policy Not Passed Count-NoLicenseHeader: ",
                    "" + oatReportLicenseInfo.getNoLicenseHeaderFileCount());
                final List<OatReportFile> noLicenseHeaderFileList = oatReportLicenseInfo.getNoLicenseHeaderFileList();
                this.writeFileList(noLicenseHeaderFileList);

                this.writeLine("Policy Not Passed Count-WrongCopyright: ",
                    "" + oatReportCopyrightInfo.getAbnormalCopyrightHeaderFileCount());
                final List<OatReportFile> abnormalCopyrightFileList
                    = oatReportCopyrightInfo.getAbnormalCopyrightHeaderFileList();
                this.writeFileList(abnormalCopyrightFileList);
                this.writeLine("Policy Not Passed Count-NoCopyright: ",
                    "" + oatReportCopyrightInfo.getNoCopyrightHeaderFileCount());
                final List<OatReportFile> noCopyrightFileList = oatReportCopyrightInfo.getNoCopyrightHeaderFileList();
                this.writeFileList(noCopyrightFileList);

                this.writeLine("XXXXXXXXX Policy Not Passed End   XXXXXXXXX");

                this.writeLine("");
                this.writeLine("Project End " + index + "/" + oatReportInfoList.size() + ": \t");
                index++;
            }

            this.writer.flush();
            this.writer.close();
        } catch (final IOException e) {
            OatLogUtil.traceException(e);
        }
        OatLogUtil.println("", "Result file path:\t" + this.resultFile);
    }

    private void writeFileList(final List<OatReportFile> invalidTypeFileList) throws IOException {
        for (final OatReportFile oatReportFile : invalidTypeFileList) {
            this.writeLine(oatReportFile.getTitle(), oatReportFile.getContent(), oatReportFile.getFilePath(),
                oatReportFile.getRule(), oatReportFile.getDesc());
        }
        this.writeLine("");
    }

    private void writeLine(final String desc) throws IOException {
        this.writer.write(desc + "\n");
    }

    private void writeLine(final String... desc) throws IOException {
        String tmp = "";
        for (final String s : desc) {
            tmp = tmp + s + "\t";
        }
        this.writer.write(tmp + "\n");
    }

}
